for file in ~/.{functions,aliases,variables,prompt,bash_private}; do
    [ -r "$file" ] && [ -f "$file" ] && source $file
done
unset file

export CLICOLOR=1
export LSCOLORS=GxFxCxDxBxegedabagaced
export EDITOR=vi
export GEDITOR=mvim

export LC_ALL=en_US.UTF-8

# Python
export PYTHONSTARTUP=~/.pythonstartup

# virtualenvwrapper
export WORKON_HOME=~/.env/
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true
[[ -s "/usr/local/bin/virtualenvwrapper.sh" ]] && source /usr/local/bin/virtualenvwrapper.sh

[[ -s "~/.profile" ]] && source ~/.profile

# git
export GIT_MERGE_AUTOEDIT=no

# history
export HISTTIMEFORMAT="%Y-%m-%d %H:%M "
export HISTFILESIZE=2000
export HISTCONTROL=ignoreboth:erasedups
export PROMPT_COMMAND="history -a;$PROMPT_COMMAND"
shopt -s histappend

# MySQL
export DYLD_LIBRARY_PATH=/usr/local/mysql/lib/:$DYLD_LIBRARY_PATH

# PATH
PATH=$PATH:/usr/local/mysql/bin
PATH=$PATH:/usr/local/mongo/bin
PATH=$PATH:/usr/local/bin
PATH=$PATH:/usr/local/sbin
PATH=$PATH:/usr/local/redis/bin
PATH=$PATH:$HOME/Code/bin
PATH=$PATH:$HOME/Code/dotfiles/bin
PATH=$PATH:$HOME/Code/gocode/bin
PATH=$PATH:/usr/local/bin/google-cloud-sdk/bin
PATH=$PATH:$HOME/Code/on-wifi/actions
PATH=$PATH:$HOME/Library/Python/2.7/bin
PATH=$HOME/.local/bin:$PATH
export PATH

### Added by the Heroku Toolbelt
export GREP_OPTIONS='--color=auto'

export NVM_DIR="$HOME/.nvm"
export NVM_SYMLINK_CURRENT=false

[[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh" --no-use  # This loads nvm
[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"
export GOPATH="$HOME/go"
[[ -s "$HOME/Code/git-push-my-face/.env" ]] && source ~/Code/git-push-my-face/.env
[[ -s "$HOME/.git-completion" ]] && source ~/.git-completion

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"


export LDFLAGS="-L/usr/local/opt/openssl/lib"

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
[[ -s "$HOME/Code/vasy/vasy-function.sh" ]] && source /Users/ben/Code/vasy/vasy-function.sh
[[ -s "$HOME/Code/vasy/vasy-completion.sh" ]] && source /Users/ben/Code/vasy/vasy-completion.sh
[[ -s "$HOME/.cargo/env" ]] && source $HOME/.cargo/env
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

ctags=/usr/local/bin/ctags

[ -f ~/.fzf.bash ] && source ~/.fzf.bash


# JINA_CLI_BEGIN

## autocomplete
_jina() {
  COMPREPLY=()
  local word="${COMP_WORDS[COMP_CWORD]}"

  if [ "$COMP_CWORD" -eq 1 ]; then
    COMPREPLY=( $(compgen -W "$(jina commands)" -- "$word") )
  else
    local words=("${COMP_WORDS[@]}")
    unset words[0]
    unset words[$COMP_CWORD]
    local completions=$(jina completions "${words[@]}")
    COMPREPLY=( $(compgen -W "$completions" -- "$word") )
  fi
}

complete -F _jina jina

# session-wise fix
ulimit -n 4096
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

# JINA_CLI_END

[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
. "$HOME/.cargo/env"
