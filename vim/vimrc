set nocompatible
filetype off

set runtimepath=$HOME/Code/dotfiles/vim,$VIMRUNTIME

call plug#begin()
    Plug 'airblade/vim-gitgutter'
    Plug 'editorconfig/editorconfig-vim'
    Plug 'github/copilot.vim'
    Plug 'sheerun/vim-polyglot'
    Plug 'ap/vim-css-color'
    Plug 'junegunn/vim-peekaboo'
    Plug 'kien/ctrlp.vim'
    " Plug 'kien/rainbow_parentheses.vim'
    Plug 'mg979/vim-visual-multi'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'pbrisbin/vim-mkdir'
    Plug 'prisma/vim-prisma'
    Plug 'tpope/vim-abolish'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-surround'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'wuelnerdotexe/vim-astro'
call plug#end()

colorscheme wombat

" automatically done by plug#end()
"filetype plugin indent on

set shell=bash\ --login

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
let g:ctrlp_root_markers = ['package.json']

map <Leader>j !python -m json.tool


set go-=T

set splitright

set hidden

set visualbell
set t_vb=
syntax on
set ruler
set showcmd

set backupdir=~/.vim/backup
set directory=~/.vim/tmp
set nobackup
set nowritebackup

set timeoutlen=1000 ttimeoutlen=10

set tabstop=4
set autoindent
set shiftwidth=4
set expandtab

set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=2

set backspace=indent,eol,start  " backspace through everything in insert mode
" set iskeyword-=-

" show line number and relative line number on command mode
set relativenumber
set number

let g:netrw_list_hide='\.pyc$,\.DS_Store$,__pycache__/$,\.ropeproject/$'
let g:netrw_banner = 0
set wildignore=*.pyc

" disable middle click
map <MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>

inoremap <C-space> <C-x><C-o>
imap <C-z> <C-y>,

" search results in the middle of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz

" disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" vim-test
" these "Ctrl mappings" work well when Caps Lock is mapped to Ctrl
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>


let mapleader = ","
cnoreabbrev W w
cnoreabbrev E e
cnoreabbrev Wq wq
cnoreabbrev vpslit vsplit

" abbreviation <insert> mode
iabbrev onsole console
iabbrev cosnole console
iabbrev consoel console
iabbrev cosnoel console
iabbrev lgo log
iabbrev vehicule vehicle
iabbrev Vehicule Vehicle
iabbrev reutrn return

ab pdb __import__("pdb").set_trace()
ab ipdb __import__("ipdb").set_trace()
ab clog console.log(
ab dbg debugger;
ab dcy cy.get('[data-cy=

" remix
iabbrev loader@ import type { LoaderFunctionArgs } from @remix-run/node;<CR>export async function loader({ request }: LoaderFunctionArgs) {<CR> return null;<CR>}<CR><CR>


autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType scss setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab

" highlight and clean up whitespace
hi! link ExtraWhitespace WarningMsg
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

" define pwd to be current file folder
" autocmd BufEnter * silent! lcd %:p:h

"autocmd BufNewFile,BufRead *.less set filetype=less
"autocmd BufNewFile,BufRead *.json set filetype=javascript
"autocmd BufNewFile,BufRead *.md set filetype=markdown


if has("gui_running")
    set guifont=M+_1m_light:h16
endif

" gitgutter
let g:gitgutter_sign_column_always = 1
let g:gitgutter_set_sign_backgrounds = 1
let g:gitgutter_eager = 0
highlight SignColumn guibg=#000000
highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

" python line length
autocmd FileType python,javascript setlocal colorcolumn=80
hi ColorColumn ctermbg=lightgrey guibg=#474747
let g:python_highlight_all = 1

" customize highlighted search result colors
hi SpellBad term=underline gui=undercurl guisp=Orange
hi MatchParen guibg=#b77fdb guifg=blue
hi Search guibg=#eae788 guifg=#242424
set hlsearch
nnoremap <esc><esc> :silent! nohls<cr>

" vim-airline
set laststatus=2
let g:airline_theme='wombat'
" show cwd instead of branch name
" let g:airline_section_b = '%-0.10{getcwd()}'


" prevent to open the preview window on autocomplete
set completeopt=menu

autocmd VimResized * :wincmd =

let g:scratch_persistence_file="~/.vim-scratch"

if has('gui_vimr')
    source ~/.config/nvim/ginit.vim
endif

" browser to use when `gx`
let g:netrw_browser_viewer = 'open'

" https://github.com/MaxMEllon/vim-jsx-pretty
let g:vim_jsx_pretty_colorful_config = 1

hi jsxAttrib guifg=#8ac6f2 gui=none
hi jsVariableDef guifg=#b77fdb gui=none
highlight def link jsDestructuringArray jsVariableDef
highlight def link jsDestructuringBlock jsVariableDef

" open split vertically
nnoremap <C-W><C-V>f :exec "vert norm <C-V><C-W>f"<CR>
nnoremap <C-W><C-V>[ :exec "vert norm <C-V><C-W>["<CR>


" coc.nvim
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" GoTo code navigation.
" nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gd :call CocAction('jumpDefinition', 'vsplit')<CR>
" nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gy :call CocAction('jumpTypeDefinition', 'vsplit')<CR>
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

set secure
