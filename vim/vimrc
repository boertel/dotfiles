set nocompatible
filetype off

set runtimepath=$HOME/Code/dotfiles/vim,$VIMRUNTIME

"filetype plugin indent on

set shell=bash\ --login

let g:gitgutter_sign_column_always = 1
let g:gitgutter_eager = 0

let g:vim_json_syntax_conceal = 0

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']

map <Leader>j !python -m json.tool


colorscheme wombat
set go-=T

set splitright

set hidden

set visualbell
set t_vb=
syntax on
set ruler
set showcmd

set backupdir=~/.vim/backup
set directory=~/.vim/tmp
set nobackup
set nowritebackup

set timeoutlen=1000 ttimeoutlen=10

set tabstop=4
set autoindent
set shiftwidth=4
set expandtab

set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=2

set backspace=indent,eol,start  " backspace through everything in insert mode
" set iskeyword-=-

let g:netrw_list_hide='\.pyc$,\.DS_Store$,__pycache__/$,\.ropeproject/$'
set wildignore=*.pyc

" disable middle click
map <MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>

inoremap <C-space> <C-x><C-o>
imap <C-z> <C-y>,

" search results in the middle of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz

" disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>


" vim-test
" these "Ctrl mappings" work well when Caps Lock is mapped to Ctrl
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

let mapleader = ","
cnoreabbrev W w
cnoreabbrev E e
cnoreabbrev Wq wq
cnoreabbrev vpslit vsplit

autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType yml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType scss setlocal ts=2 sts=2 sw=2 expandtab


" highlight and clean up whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

" define pwd to be current file folder
" autocmd BufEnter * silent! lcd %:p:h

autocmd BufNewFile,BufRead *.less set filetype=less
autocmd BufNewFile,BufRead *.json set filetype=javascript
autocmd BufNewFile,BufRead *.md set filetype=markdown

" Use formatprg when available
let g:neoformat_try_formatprg = 1

" show line number and relative line number on command mode
set relativenumber
set number

if has("gui_running")
    set guifont=M+_1m_light:h16
endif

" python line length
autocmd FileType python,javascript setlocal colorcolumn=80
hi ColorColumn ctermbg=lightgrey guibg=#474747

hi SpellBad term=underline gui=undercurl guisp=Orange
hi MatchParen guibg=#b77fdb guifg=blue
hi Search guibg=#85C6EC guifg=#FFFFFF
set hlsearch
nnoremap <esc><esc> :silent! nohls<cr>

ab pdb __import__("pdb").set_trace()
ab ipdb __import__("ipdb").set_trace()
ab clog console.log(
ab dbg debugger;
ab dcy cy.get('[data-cy=

" vim-airline
set laststatus=2
let g:airline_theme='wombat'

" ale
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_sign_column_always = 1

highlight ALEErrorSign ctermfg=124 guibg=#970A0F
highlight ALEWarningSign ctermfg=31 guibg=#FFE161 guifg=#E5786D

" Custom linting symbols
let g:ale_sign_error = '·'
let g:ale_sign_warning = '·'

let g:ale_linters = {
            \'javascript': ['eslint'],
            \'python': ['flake8'],
            \'html': [],
            \}

" python-mode
" let ale do its job
let g:pymode_lint = 0
let g:pymode_rope_goto_definition_cmd = 'vnew'
" prevent to open the preview window on autocomplete
set completeopt=menu
autocmd BufWritePre *.py execute ':Black'

autocmd VimResized * :wincmd =

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:snips_author="boertel"

"let g:prettier#exec_cmd_async = 1
"let g:prettier#quickfix_auto_focus = 0
let g:prettier#autoformat = 0
"autocmd BufWritePre *.ts,*.tsx Prettier


let g:scratch_persistence_file="~/.vim-scratch"

if has('gui_vimr')
    source ~/.config/nvim/ginit.vim
endif

au VimEnter * RainbowParenthesesToggle

" browser to use when `gx`
let g:netrw_browser_viewer = 'open'

let g:vim_jsx_pretty_colorful_config = 1

hi jsxAttrib guifg=#8ac6f2 gui=none
hi jsVariableDef guifg=#b77fdb gui=none
highlight def link jsDestructuringArray jsVariableDef
highlight def link jsDestructuringBlock jsVariableDef

" ctags
set tags=./tags;
" open split vertically
nnoremap <C-W><C-V>f :exec "vert norm <C-V><C-W>f"<CR>
nnoremap <C-W><C-V>[ :exec "vert norm <C-V><C-W>["<CR>


set secure
